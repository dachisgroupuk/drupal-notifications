<?php

/**
 * A notification api framework
 *
 * @author Rachel Graves
 */

/**
 * Prepare a notification factory.
 * Call any module implementing hook_innodev_notify,
 * hook_innodev_notify_alter and
 * Produce a suitable notification based on the return
 *
 * @param $type String the
 * @author Rachel Graves
 */
function notifications_api_notify($type, $op, $payload) {

  // Produce a notification object
  $factories = _notifications_api_generate_notifications($type, $op, $payload);

  // Allow a module to alter a notification
  $factories = _notifications_api_alter($factories);

  // Tell factories to send their notifications via Royal Mail
  foreach ($factories as $factory) {
    $factory->send();
  }

}


/**
 * Provides a notifications factory to anymodule implementing both
 * hook_notification_TYPE_OP and hook_notification
 *
 * @return array of Notifications_Api_Factory_Queue
 * @author Maarten Jacobs
 */
function _notifications_api_generate_notifications($type, $op, $payload) {


  require_once('lib/notifications/notifications_api_factory_queue.php');

  $factories = array();

  // Run hook_notification_TYPE_OP
  foreach (module_implements('notification_' . $type . '_' . $op) as $module) {
    $factory = new Notifications_Api_Factory_Queue($module, $type, $op, $payload);

    $function = $module . '_notification_' . $type . '_' . $op;
    $function($factory);
    $factories[] = $factory;
  }

  // Run hook_notification
  foreach (module_implements('notification') as $module) {
    $factory = new Notifications_Api_Factory_Queue($module, $type, $op, $payload);

    $function = $module . '_notification';
    $function($factory);
    $factories[] = $factory;
  }

  return $factories;

}

/**
 * Calls the alter hook on the generated Factories
 *
 * @param array $factories
 * @return array
 * @author Maarten Jacobs
 */
function _notifications_api_alter($factories) {
  drupal_alter('notifications_api', $factories);
  return $factories;
}


/**
 * First try and call hook_innodev_notify_TYPE_OP
 * Then try and call hook_innodev_notify
 *
 * @author Rachel Graves
 */
function _notifications_api_hook_innodev_notify($type, $op, $payload) {

  $notification = new Innodev_Notification($type, $op, $payload);

  if(file_exists($file)) {

    require_once($file);

  } else {
    foreach (module_implements('innodev_notify') as $module) {
      $function = $module . '_' . 'innodev_notify';
      return call_user_func_array($function, $args);
    }
  }

}
